/*////////////////////////////////////////////////////
// \file Api.h
// \brief Gère l'envoi et la réception de commande API
// \author FOUQUART Christophe
// \version 0.1
// \date 11/03/2011
////////////////////////////////////////////////////*/

#ifndef API_H
#define API_H

#include "protocole.h"

/*////////////////////////////////////////////////////////////////////////////////////
// \class Api
// \brief Gère l'envoi et la réception de commande API
//
// Cette classe définie les membres et méthodes
// héritées de la classe Protocole.
// Cette classe peut être dérivée en cas de changement de certaines fonctions
////////////////////////////////////////////////////////////////////////////////////*/

class Api : public Protocole
{
protected:

    /*///////////////////////////////////////////////////////////////////////////
    // \fn QString* creerTrameCommande(TypeCommandesApi noCommande,QString data="")
    // \brief Crée une trame en fonction du numéro de commande API
    //
    // \param TypeCommandesApi Type de commande API
    // \param data Données facultatives
    ///////////////////////////////////////////////////////////////////////////*/
    QString* creerTrameCommande(QString typeCommande,QString data="");

    /*///////////////////////////////////////////////////////////////////////////
    // \fn void demandeMesureNox()
    // \brief Demande de mesure immédiate pour le NOX
    //
    // \return QVector<float> Tableau des mesures
    ///////////////////////////////////////////////////////////////////////////*/
    QVector<float>* demandeMesureNox();

    /*///////////////////////////////////////////////////////////////////////////
    // \fn float getFloatFromMesureString(QString mesure)
    // \brief Renvoi le float contenu dans la trame de mesure
    //
    // \return float Mesure au format flottant
    ///////////////////////////////////////////////////////////////////////////*/
    float getFloatFromMesureString(QString mesure);

public:
    /*///////////////////////////////////////////////////////////////////////////
    // \fn Mode4(QString adressePeriph, TypePeripherique typePeriph, TypePolluant typePolluant)
    // \brief Constructeur
    //
    // \param adressePeriph Adresse du périphérique
    // \param TypePeripherique Analyseur ou Diluteur
    // \param TypePolluant Polluant associé au périphérique
    ///////////////////////////////////////////////////////////////////////////*/
    Api(QString adressePeriph, TypePeripherique typePeriph, TypePolluant typePolluant);

    /*///////////////////////////////////////////////////////////////////////////
    // \fn virtual void demandeMesure()
    // \brief Demande de mesure immédiate
    //
    // \return QVector<float> Tableau des mesures
    ///////////////////////////////////////////////////////////////////////////*/
    virtual QVector<float>* demandeMesure();

    /*///////////////////////////////////////////////////////////////////////////
    // \fn virtual void demandeAlarme()
    // \brief Demande d'alarme
    //
    // \return ushort Valeur de l'alarme
    ///////////////////////////////////////////////////////////////////////////*/
    virtual ushort demandeAlarme();

    /*///////////////////////////////////////////////////////////////////////////
    // \fn virtual void passageZero()
    // \brief Demande de passage en mode zero
    ///////////////////////////////////////////////////////////////////////////*/
    virtual void passageZero();

    /*///////////////////////////////////////////////////////////////////////////
    // \fn virtual void passageEtalon()
    // \brief Demande de passage en mode étalon
    ///////////////////////////////////////////////////////////////////////////*/
    virtual void passageEtalon();

    /*///////////////////////////////////////////////////////////////////////////
    // \fn virtual void passageMesure()
    // \brief Demande de passage en mode mesure
    ///////////////////////////////////////////////////////////////////////////*/
    virtual void passageMesure();

    /*///////////////////////////////////////////////////////////////////////////
    // \fn virtual void commandeSpan(QString canal,ushort point=0,ushort concO3=0)
    // \brief Commande au diluteur de se mettre à un certain point de gaz
    ///////////////////////////////////////////////////////////////////////////*/
    virtual void commandeSpan(QString canal,ushort point=0,ushort concO3=0);

    /*///////////////////////////////////////////////////////////////////////////
    // \fn virtual void commandeSpan(QString canal,ushort point=0,ushort concO3=0)
    // \brief Commande au diluteur de se mettre à un certain point de gaz
    ///////////////////////////////////////////////////////////////////////////*/
    virtual void commandeSpanZero(QString canal);

    /*///////////////////////////////////////////////////////////////////////////
    // \fn void commandeSpan(ushort canal,ushort point)
    // \brief Commande au diluteur de se mettre à un certain point de gaz
    //
    // \param pointNO Point de consigne NO
    // \param concO3  Point de consigne ozone
    ///////////////////////////////////////////////////////////////////////////*/
    void commandeSpanTpg(ushort pointNO,ushort concO3);

    /*///////////////////////////////////////////////////////////////////////////
    // \fn virtual void commandeSpanO3(ushort point03=0)
    // \brief Commande au diluteur de se mettre à un certain point de gaz O3
    ///////////////////////////////////////////////////////////////////////////*/
    virtual void commandeSpanO3(ushort point03=0);

    /*///////////////////////////////////////////////////////////////////////////
    // \fn virtual void standBy()
    // \brief mise en stand-by du périphérique
    ///////////////////////////////////////////////////////////////////////////*/
    virtual void standBy();

};

#endif // API_H

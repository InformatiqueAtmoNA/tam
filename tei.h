/*////////////////////////////////////////////////////
// \file Tei.h
// \brief Gère l'envoi et la réception de commande Tei
// \author FOUQUART Christophe
// \version 0.1
// \date 09/02/2011
////////////////////////////////////////////////////*/

#ifndef TEI_H
#define TEI_H

#include <iostream>
#include "protocole.h"

/*////////////////////////////////////////////////////////////////////////////////////
// \class Tei
// \brief Gère l'envoi et la réception de commande TEI
//
// Cette classe définie les membres et méthodes
// héritées de la classe Protocole.
// Cette classe peut être dérivée en cas de changement de certaines fonctions
////////////////////////////////////////////////////////////////////////////////////*/
class Tei : public Protocole
{
protected:
    /*///////////////////////////////////////////////////////////////////////////
    // \fn setModeRemote()
    // \brief Enclenche le controle a distance
    //
    // \return bool Vrai si réussite
    ///////////////////////////////////////////////////////////////////////////*/
    bool setModeRemote();

    /*///////////////////////////////////////////////////////////////////////////
    // \fn setFormat()
    // \brief Paramétrage du format de trame
    //
    // \return bool Vrai si réussite
    ///////////////////////////////////////////////////////////////////////////*/
    bool setFormat();

    /*///////////////////////////////////////////////////////////////////////////
    // \fn setGasUnit()
    // \brief Paramétrage de l'unité de mesure
    //
    // \return bool Vrai si réussite
    ///////////////////////////////////////////////////////////////////////////*/
    bool setGasUnit();

    /*///////////////////////////////////////////////////////////////////////////
    // \fn QString CreerTrameCommande(QString commande)
    // \brief Crée une trame au format TEI
    //
    // \param commande Commande TEI
    // \param data Données facultatives
    ///////////////////////////////////////////////////////////////////////////*/
    QString* creerTrameCommande(QString commande);

    /*///////////////////////////////////////////////////////////////////////////
    // \fn float getFloatFromMesureString(QString mesure)
    // \brief Renvoi le float contenu dans la trame de mesure
    //
    // \return float Mesure au format flottant
    ///////////////////////////////////////////////////////////////////////////*/
    float getFloatFromMesureString(QString mesure);

    /*///////////////////////////////////////////////////////////////////////////
    // \fn void demandeMesureNox()
    // \brief Demande de mesure immédiate pour le NOX
    //
    // \return QVector<float> Tableau des mesures
    ///////////////////////////////////////////////////////////////////////////*/
    QVector<float>* demandeMesureNox();

public:
    /*///////////////////////////////////////////////////////////////////////////
    // \fn Tei()
    // \brief Constructeur
    ///////////////////////////////////////////////////////////////////////////*/
    Tei();

    /*///////////////////////////////////////////////////////////////////////////
    // \fn Tei(QString adressePeriph, TypePeripherique typePeriph, bool accepteFloat)
    // \brief Constructeur
    //
    // \param adressePeriph Adresse du périphérique
    // \param typePeriph Analyseur ou Diluteur
    // \param typePolluant Type de polluant associé à l'appareil
    // \param optionTpg Paramètre définissant si l'appareil dispose d'un ozoniseur ou d'un photometre
    ///////////////////////////////////////////////////////////////////////////*/
    Tei(QString adressePeriph, TypePeripherique typePeriph, TypePolluant typePolluant,OptionTpg optionTpg=AUCUNE);

    /*///////////////////////////////////////////////////////////////////////////
    // \fn virtual Mode4()
    // \brief Destructeur
    ///////////////////////////////////////////////////////////////////////////*/
    virtual ~Tei();

    /*///////////////////////////////////////////////////////////////////////////
    // \fn virtual void init()
    // \brief Initialisation des parametres du périphérique
    ///////////////////////////////////////////////////////////////////////////*/
    virtual void init();

    /*///////////////////////////////////////////////////////////////////////////
    // \fn virtual void parDefault()
    // \brief Règle l'appareil sur son mode de fonctionnement par défaut
    ///////////////////////////////////////////////////////////////////////////*/
    virtual void parDefault();

    /*///////////////////////////////////////////////////////////////////////////
    // \fn virtual ushort offset()
    // \brief Renvoie l'offsetdu périphérique
    //
    // \return int Offsetdu périphérique
    ///////////////////////////////////////////////////////////////////////////*/
    virtual short offset();

    /*///////////////////////////////////////////////////////////////////////////
    // \fn virtual void demandeMesure()
    // \brief Demande de mesure immédiate
    //
    // \return QVector<float> Tableau des mesures
    ///////////////////////////////////////////////////////////////////////////*/
    virtual QVector<float>* demandeMesure();

    /*///////////////////////////////////////////////////////////////////////////
    // \fn virtual void demandeAlarme()
    // \brief Demande d'alarme
    //
    // \return ushort Valeur de l'alarme
    ///////////////////////////////////////////////////////////////////////////*/
    virtual ushort demandeAlarme();

    /*///////////////////////////////////////////////////////////////////////////
    // \fn virtual void demandeDateHeure()
    // \brief Demande la date et l'heure
    //
    // \return QDateTime* Date et heure du périphérique
    ///////////////////////////////////////////////////////////////////////////*/
    virtual QDateTime* demandeDateHeure();

    /*///////////////////////////////////////////////////////////////////////////
    // \fn virtual void passageZero()
    // \brief Demande de passage en mode zero
    ///////////////////////////////////////////////////////////////////////////*/
    virtual void passageZero();

    /*///////////////////////////////////////////////////////////////////////////
    // \fn virtual void passageEtalon()
    // \brief Demande de passage en mode étalon
    ///////////////////////////////////////////////////////////////////////////*/
    virtual void passageEtalon();

    /*///////////////////////////////////////////////////////////////////////////
    // \fn virtual void passageMesure()
    // \brief Demande de passage en mode mesure
    ///////////////////////////////////////////////////////////////////////////*/
    virtual void passageMesure();

    /*///////////////////////////////////////////////////////////////////////////
    // \fn virtual void reset()
    // \brief Reset du périphérique
    ///////////////////////////////////////////////////////////////////////////*/
    virtual void reset();

    /*///////////////////////////////////////////////////////////////////////////
    // \fn virtual void standBy()
    // \brief mise en stand-by du périphérique
    ///////////////////////////////////////////////////////////////////////////*/
    virtual void standBy();

    /*///////////////////////////////////////////////////////////////////////////
    // \fn virtual void commandeEvent()
    // \brief Connaitre les valeurs actuelles de gaz du diluteur
    ///////////////////////////////////////////////////////////////////////////*/
    virtual void commandeEvent();

    /*///////////////////////////////////////////////////////////////////////////
    // \fn virtual void commandeConfig()
    // \brief Connaitre la configuration actuelle du diluteur
    //
    // \return void* Pointeur sur la structure de configuration
    ///////////////////////////////////////////////////////////////////////////*/
    virtual void* commandeConfig();
};

#endif // TEI_H

/*////////////////////////////////////////////////////
// \file mode4.h
// \brief Gère l'envoi et la réception de commande MODE4
// \author FOUQUART Christophe
// \version 0.1
// \date 09/02/2011
////////////////////////////////////////////////////*/

#ifndef MODE4_H
#define MODE4_H

#include <iostream>

#include "protocole.h"
#include "mode4StructConfig.h"

/*////////////////////////////////////////////////////////////////////////////////////
// \class Mode4
// \brief Gère l'envoi et la réception de commande MODE4
//
// Cette classe définie les membres et méthodes
// héritées de la classe Protocole.
// Cette classe peut être dérivée en cas de changement de certaines fonctions
////////////////////////////////////////////////////////////////////////////////////*/
class Mode4 : public Protocole
{
protected:

    bool accepteMesureFloat;

    /*///////////////////////////////////////////////////////////////////////////
    // \fn QString* creerTrameCommande(QString noCommande,QString data="")
    // \brief Crée une trame en fonction du numéro de commande MODE4
    //
    // \param noCommande Cuméro de commande MODE4
    // \param data Données facultatives
    ///////////////////////////////////////////////////////////////////////////*/
    QString* creerTrameCommande(QString noCommande,QString data="");

    /*///////////////////////////////////////////////////////////////////////////
    // \fn QString* calculerBCC(QString trame)
    // \brief Calcule du BCC (Block Check Character)
    //
    // Le BCC est obtenu en effectuant un OU exclusif (XOR)
    // sur tous les octets dà partir de STX exclu jusqu'au BCC exclu
    //
    // \param trame Trame MODE4
    // \return QString* BCC
    ///////////////////////////////////////////////////////////////////////////*/
    QString* calculerBCC(QString trame);

    /*///////////////////////////////////////////////////////////////////////////
    // \fn Mode4_AnalyseurConfig* parseConfig(QString trameConfig)
    // \brief Analyse la trame et renvoie les infos de config dans une structure
    //
    // \param trameConfig Trame de réponse a la commande MODE4 02
    // \return void* Pointeur sur une structure contenant les infos de configuration
    ///////////////////////////////////////////////////////////////////////////*/
    void* parseConfig(QString trameConfig);

    /*///////////////////////////////////////////////////////////////////////////
    // \fn void getStrForNumber()
    // \brief Renvoie une chaine de 8 caractères représentant le nombre en paramètre
    //
    // \param nombre Nombre à transformer en chaine
    // \return QString* Chaine représentant le nombre
    ///////////////////////////////////////////////////////////////////////////*/
    QString* getStrForNumber(ushort nombre, ushort nbDigit);

public:
    /*///////////////////////////////////////////////////////////////////////////
    // \fn Mode4()
    // \brief Constructeur
    ///////////////////////////////////////////////////////////////////////////*/
    Mode4();

    /*///////////////////////////////////////////////////////////////////////////
    // \fn Mode4(QString adressePeriph, TypePeripherique typePeriph, bool accepteFloat)
    // \brief Constructeur
    //
    // \param adressePeriph Adresse du périphérique
    // \param TypePeripherique Analyseur ou Diluteur
    // \param accepteFloat Vrai si accepte la commande 16 de mesure en flottant
    ///////////////////////////////////////////////////////////////////////////*/
    Mode4(QString adressePeriph, TypePeripherique typePeriph, bool accepteFloat);

    /*///////////////////////////////////////////////////////////////////////////
    // \fn virtual Mode4()
    // \brief Destructeur
    ///////////////////////////////////////////////////////////////////////////*/
    ~Mode4();

    /*///////////////////////////////////////////////////////////////////////////
    // \fn virtual void init()
    // \brief Initialisation des parametres du périphérique
    ///////////////////////////////////////////////////////////////////////////*/
    virtual void init();

    /*///////////////////////////////////////////////////////////////////////////
    // \fn virtual void parDefault()
    // \brief Règle l'appareil sur son mode de fonctionnement par défaut
    ///////////////////////////////////////////////////////////////////////////*/
    virtual void parDefault();

    /*///////////////////////////////////////////////////////////////////////////
    // \fn virtual short offset()
    // \brief Renvoie l'offsetdu périphérique
    //
    // \return short Offsetdu périphérique
    ///////////////////////////////////////////////////////////////////////////*/
    virtual short offset();

    /*///////////////////////////////////////////////////////////////////////////
    // \fn virtual void demandeMesure()
    // \brief Demande de mesure immédiate
    //
    // \return QVector<float> Tableau des mesures
    ///////////////////////////////////////////////////////////////////////////*/
    virtual QVector<float>* demandeMesure();

    /*///////////////////////////////////////////////////////////////////////////
    // \fn virtual void demandeAlarme()
    // \brief Demande d'alarme
    //
    // \return ushort Valeur de l'alarme
    ///////////////////////////////////////////////////////////////////////////*/
    virtual ushort demandeAlarme();

    /*///////////////////////////////////////////////////////////////////////////
    // \fn virtual void demandeHeure()
    // \brief Demande d'heure
    //
    // \return QDateTime* Date et heure du périphérique
    ///////////////////////////////////////////////////////////////////////////*/
    virtual QDateTime* demandeDateHeure();

    /*///////////////////////////////////////////////////////////////////////////
    // \fn virtual void passageZero()
    // \brief Demande de passage en mode zero
    ///////////////////////////////////////////////////////////////////////////*/
    virtual void passageZero();

    /*///////////////////////////////////////////////////////////////////////////
    // \fn virtual void passageEtalon()
    // \brief Demande de passage en mode étalon
    ///////////////////////////////////////////////////////////////////////////*/
    virtual void passageEtalon();

    /*///////////////////////////////////////////////////////////////////////////
    // \fn virtual void passageMesure()
    // \brief Demande de passage en mode mesure
    ///////////////////////////////////////////////////////////////////////////*/
    virtual void passageMesure();

    /*///////////////////////////////////////////////////////////////////////////
    // \fn virtual void commandeSpan(ushort canal,ushort point)
    // \brief Commande au diluteur de se mettre à un certain point de gaz
    //
    // \param canal canal sur lequel le polluant souhaité est programmé
    // \param point Point de consigne
    // \param concO3 Concentration en ozone
    ///////////////////////////////////////////////////////////////////////////*/
    virtual void commandeSpan(ushort canal,ushort point=0, ushort concO3=0);

    /*///////////////////////////////////////////////////////////////////////////
    // \fn void commandeSpan(ushort canal,ushort point
    // \brief Commande au diluteur de se mettre à un certain point de gaz O3
    ///////////////////////////////////////////////////////////////////////////*/
    virtual void commandeSpanO3(ushort canal,ushort point03);

    /*///////////////////////////////////////////////////////////////////////////
    // \fn virtual void reset()
    // \brief Reset du périphérique
    ///////////////////////////////////////////////////////////////////////////*/
    virtual void reset();

    /*///////////////////////////////////////////////////////////////////////////
    // \fn virtual void standBy()
    // \brief mise en stand-by du périphérique
    ///////////////////////////////////////////////////////////////////////////*/
    virtual void standBy();

    /*///////////////////////////////////////////////////////////////////////////
    // \fn virtual void commandeEvent()
    // \brief Connaitre les valeurs actuelles de gaz du diluteur
    ///////////////////////////////////////////////////////////////////////////*/
    virtual void commandeEvent();

    /*///////////////////////////////////////////////////////////////////////////
    // \fn virtual void commandeConfig()
    // \brief Connaitre la configuration actuelle du diluteur
    //
    // \return void* Pointeur sur la structure de configuration
    ///////////////////////////////////////////////////////////////////////////*/
    virtual void* commandeConfig();
};

#endif // MODE4_H
